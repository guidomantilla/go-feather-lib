// Code generated by MockGen. DO NOT EDIT.
// Source: ../pkg/datasource/types.go
//
// Generated by this command:
//
//	mockgen -package=datasource -destination ../pkg/datasource/mocks.go -source ../pkg/datasource/types.go
//

// Package datasource is a generated GoMock package.
package datasource

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockContext is a mock of Context interface.
type MockContext struct {
	ctrl     *gomock.Controller
	recorder *MockContextMockRecorder
	isgomock struct{}
}

// MockContextMockRecorder is the mock recorder for MockContext.
type MockContextMockRecorder struct {
	mock *MockContext
}

// NewMockContext creates a new mock instance.
func NewMockContext(ctrl *gomock.Controller) *MockContext {
	mock := &MockContext{ctrl: ctrl}
	mock.recorder = &MockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContext) EXPECT() *MockContextMockRecorder {
	return m.recorder
}

// Server mocks base method.
func (m *MockContext) Server() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Server")
	ret0, _ := ret[0].(string)
	return ret0
}

// Server indicates an expected call of Server.
func (mr *MockContextMockRecorder) Server() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Server", reflect.TypeOf((*MockContext)(nil).Server))
}

// Service mocks base method.
func (m *MockContext) Service() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Service")
	ret0, _ := ret[0].(string)
	return ret0
}

// Service indicates an expected call of Service.
func (mr *MockContextMockRecorder) Service() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Service", reflect.TypeOf((*MockContext)(nil).Service))
}

// Url mocks base method.
func (m *MockContext) Url() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Url")
	ret0, _ := ret[0].(string)
	return ret0
}

// Url indicates an expected call of Url.
func (mr *MockContextMockRecorder) Url() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Url", reflect.TypeOf((*MockContext)(nil).Url))
}

// MockConnection is a mock of Connection interface.
type MockConnection[T StoreConnectionTypes] struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionMockRecorder[T]
	isgomock struct{}
}

// MockConnectionMockRecorder is the mock recorder for MockConnection.
type MockConnectionMockRecorder[T StoreConnectionTypes] struct {
	mock *MockConnection[T]
}

// NewMockConnection creates a new mock instance.
func NewMockConnection[T StoreConnectionTypes](ctrl *gomock.Controller) *MockConnection[T] {
	mock := &MockConnection[T]{ctrl: ctrl}
	mock.recorder = &MockConnectionMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnection[T]) EXPECT() *MockConnectionMockRecorder[T] {
	return m.recorder
}

// Close mocks base method.
func (m *MockConnection[T]) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockConnectionMockRecorder[T]) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConnection[T])(nil).Close))
}

// Connect mocks base method.
func (m *MockConnection[T]) Connect() (T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockConnectionMockRecorder[T]) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockConnection[T])(nil).Connect))
}

// Context mocks base method.
func (m *MockConnection[T]) Context() Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockConnectionMockRecorder[T]) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockConnection[T])(nil).Context))
}

// MockTransactionHandler is a mock of TransactionHandler interface.
type MockTransactionHandler[T StoreConnectionTypes] struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionHandlerMockRecorder[T]
	isgomock struct{}
}

// MockTransactionHandlerMockRecorder is the mock recorder for MockTransactionHandler.
type MockTransactionHandlerMockRecorder[T StoreConnectionTypes] struct {
	mock *MockTransactionHandler[T]
}

// NewMockTransactionHandler creates a new mock instance.
func NewMockTransactionHandler[T StoreConnectionTypes](ctrl *gomock.Controller) *MockTransactionHandler[T] {
	mock := &MockTransactionHandler[T]{ctrl: ctrl}
	mock.recorder = &MockTransactionHandlerMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionHandler[T]) EXPECT() *MockTransactionHandlerMockRecorder[T] {
	return m.recorder
}

// HandleTransaction mocks base method.
func (m *MockTransactionHandler[T]) HandleTransaction(ctx context.Context, fn TransactionHandlerFn[T]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleTransaction", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleTransaction indicates an expected call of HandleTransaction.
func (mr *MockTransactionHandlerMockRecorder[T]) HandleTransaction(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleTransaction", reflect.TypeOf((*MockTransactionHandler[T])(nil).HandleTransaction), ctx, fn)
}
