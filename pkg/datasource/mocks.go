// Code generated by MockGen. DO NOT EDIT.
// Source: ../pkg/datasource/types.go
//
// Generated by this command:
//
//	mockgen -package=datasource -destination ../pkg/datasource/mocks.go -source ../pkg/datasource/types.go
//

// Package datasource is a generated GoMock package.
package datasource

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStoreContext is a mock of StoreContext interface.
type MockStoreContext struct {
	ctrl     *gomock.Controller
	recorder *MockStoreContextMockRecorder
}

// MockStoreContextMockRecorder is the mock recorder for MockStoreContext.
type MockStoreContextMockRecorder struct {
	mock *MockStoreContext
}

// NewMockStoreContext creates a new mock instance.
func NewMockStoreContext(ctrl *gomock.Controller) *MockStoreContext {
	mock := &MockStoreContext{ctrl: ctrl}
	mock.recorder = &MockStoreContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreContext) EXPECT() *MockStoreContextMockRecorder {
	return m.recorder
}

// Server mocks base method.
func (m *MockStoreContext) Server() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Server")
	ret0, _ := ret[0].(string)
	return ret0
}

// Server indicates an expected call of Server.
func (mr *MockStoreContextMockRecorder) Server() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Server", reflect.TypeOf((*MockStoreContext)(nil).Server))
}

// Service mocks base method.
func (m *MockStoreContext) Service() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Service")
	ret0, _ := ret[0].(string)
	return ret0
}

// Service indicates an expected call of Service.
func (mr *MockStoreContextMockRecorder) Service() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Service", reflect.TypeOf((*MockStoreContext)(nil).Service))
}

// Url mocks base method.
func (m *MockStoreContext) Url() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Url")
	ret0, _ := ret[0].(string)
	return ret0
}

// Url indicates an expected call of Url.
func (mr *MockStoreContextMockRecorder) Url() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Url", reflect.TypeOf((*MockStoreContext)(nil).Url))
}

// MockStoreConnection is a mock of StoreConnection interface.
type MockStoreConnection[T StoreConnectionTypes] struct {
	ctrl     *gomock.Controller
	recorder *MockStoreConnectionMockRecorder[T]
}

// MockStoreConnectionMockRecorder is the mock recorder for MockStoreConnection.
type MockStoreConnectionMockRecorder[T StoreConnectionTypes] struct {
	mock *MockStoreConnection[T]
}

// NewMockStoreConnection creates a new mock instance.
func NewMockStoreConnection[T StoreConnectionTypes](ctrl *gomock.Controller) *MockStoreConnection[T] {
	mock := &MockStoreConnection[T]{ctrl: ctrl}
	mock.recorder = &MockStoreConnectionMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreConnection[T]) EXPECT() *MockStoreConnectionMockRecorder[T] {
	return m.recorder
}

// Close mocks base method.
func (m *MockStoreConnection[T]) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockStoreConnectionMockRecorder[T]) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStoreConnection[T])(nil).Close))
}

// Connect mocks base method.
func (m *MockStoreConnection[T]) Connect() (T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockStoreConnectionMockRecorder[T]) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockStoreConnection[T])(nil).Connect))
}

// Context mocks base method.
func (m *MockStoreConnection[T]) Context() StoreContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(StoreContext)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockStoreConnectionMockRecorder[T]) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockStoreConnection[T])(nil).Context))
}

// MockStoreTransactionHandler is a mock of StoreTransactionHandler interface.
type MockStoreTransactionHandler[T StoreConnectionTypes] struct {
	ctrl     *gomock.Controller
	recorder *MockStoreTransactionHandlerMockRecorder[T]
}

// MockStoreTransactionHandlerMockRecorder is the mock recorder for MockStoreTransactionHandler.
type MockStoreTransactionHandlerMockRecorder[T StoreConnectionTypes] struct {
	mock *MockStoreTransactionHandler[T]
}

// NewMockStoreTransactionHandler creates a new mock instance.
func NewMockStoreTransactionHandler[T StoreConnectionTypes](ctrl *gomock.Controller) *MockStoreTransactionHandler[T] {
	mock := &MockStoreTransactionHandler[T]{ctrl: ctrl}
	mock.recorder = &MockStoreTransactionHandlerMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreTransactionHandler[T]) EXPECT() *MockStoreTransactionHandlerMockRecorder[T] {
	return m.recorder
}

// HandleTransaction mocks base method.
func (m *MockStoreTransactionHandler[T]) HandleTransaction(ctx context.Context, fn StoreTransactionHandlerFn[T]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleTransaction", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleTransaction indicates an expected call of HandleTransaction.
func (mr *MockStoreTransactionHandlerMockRecorder[T]) HandleTransaction(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleTransaction", reflect.TypeOf((*MockStoreTransactionHandler[T])(nil).HandleTransaction), ctx, fn)
}
