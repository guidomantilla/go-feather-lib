// Code generated by MockGen. DO NOT EDIT.
// Source: ../pkg/security/password_types.go
//
// Generated by this command:
//
//	mockgen -package=security -destination ../pkg/security/password_mocks.go -source ../pkg/security/password_types.go
//

// Package security is a generated GoMock package.
package security

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPasswordEncoder is a mock of PasswordEncoder interface.
type MockPasswordEncoder struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordEncoderMockRecorder
	isgomock struct{}
}

// MockPasswordEncoderMockRecorder is the mock recorder for MockPasswordEncoder.
type MockPasswordEncoderMockRecorder struct {
	mock *MockPasswordEncoder
}

// NewMockPasswordEncoder creates a new mock instance.
func NewMockPasswordEncoder(ctrl *gomock.Controller) *MockPasswordEncoder {
	mock := &MockPasswordEncoder{ctrl: ctrl}
	mock.recorder = &MockPasswordEncoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordEncoder) EXPECT() *MockPasswordEncoderMockRecorder {
	return m.recorder
}

// Encode mocks base method.
func (m *MockPasswordEncoder) Encode(rawPassword string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", rawPassword)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encode indicates an expected call of Encode.
func (mr *MockPasswordEncoderMockRecorder) Encode(rawPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockPasswordEncoder)(nil).Encode), rawPassword)
}

// Matches mocks base method.
func (m *MockPasswordEncoder) Matches(encodedPassword, rawPassword string) (*bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Matches", encodedPassword, rawPassword)
	ret0, _ := ret[0].(*bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Matches indicates an expected call of Matches.
func (mr *MockPasswordEncoderMockRecorder) Matches(encodedPassword, rawPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Matches", reflect.TypeOf((*MockPasswordEncoder)(nil).Matches), encodedPassword, rawPassword)
}

// UpgradeEncoding mocks base method.
func (m *MockPasswordEncoder) UpgradeEncoding(encodedPassword string) (*bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeEncoding", encodedPassword)
	ret0, _ := ret[0].(*bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeEncoding indicates an expected call of UpgradeEncoding.
func (mr *MockPasswordEncoderMockRecorder) UpgradeEncoding(encodedPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeEncoding", reflect.TypeOf((*MockPasswordEncoder)(nil).UpgradeEncoding), encodedPassword)
}

// MockPasswordGenerator is a mock of PasswordGenerator interface.
type MockPasswordGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordGeneratorMockRecorder
	isgomock struct{}
}

// MockPasswordGeneratorMockRecorder is the mock recorder for MockPasswordGenerator.
type MockPasswordGeneratorMockRecorder struct {
	mock *MockPasswordGenerator
}

// NewMockPasswordGenerator creates a new mock instance.
func NewMockPasswordGenerator(ctrl *gomock.Controller) *MockPasswordGenerator {
	mock := &MockPasswordGenerator{ctrl: ctrl}
	mock.recorder = &MockPasswordGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordGenerator) EXPECT() *MockPasswordGeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockPasswordGenerator) Generate() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate")
	ret0, _ := ret[0].(string)
	return ret0
}

// Generate indicates an expected call of Generate.
func (mr *MockPasswordGeneratorMockRecorder) Generate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockPasswordGenerator)(nil).Generate))
}

// Validate mocks base method.
func (m *MockPasswordGenerator) Validate(rawPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", rawPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockPasswordGeneratorMockRecorder) Validate(rawPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockPasswordGenerator)(nil).Validate), rawPassword)
}

// set mocks base method.
func (m *MockPasswordGenerator) set(property string, value int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "set", property, value)
}

// set indicates an expected call of set.
func (mr *MockPasswordGeneratorMockRecorder) set(property, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "set", reflect.TypeOf((*MockPasswordGenerator)(nil).set), property, value)
}

// MockPasswordManager is a mock of PasswordManager interface.
type MockPasswordManager struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordManagerMockRecorder
	isgomock struct{}
}

// MockPasswordManagerMockRecorder is the mock recorder for MockPasswordManager.
type MockPasswordManagerMockRecorder struct {
	mock *MockPasswordManager
}

// NewMockPasswordManager creates a new mock instance.
func NewMockPasswordManager(ctrl *gomock.Controller) *MockPasswordManager {
	mock := &MockPasswordManager{ctrl: ctrl}
	mock.recorder = &MockPasswordManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordManager) EXPECT() *MockPasswordManagerMockRecorder {
	return m.recorder
}

// Encode mocks base method.
func (m *MockPasswordManager) Encode(rawPassword string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", rawPassword)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encode indicates an expected call of Encode.
func (mr *MockPasswordManagerMockRecorder) Encode(rawPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockPasswordManager)(nil).Encode), rawPassword)
}

// Generate mocks base method.
func (m *MockPasswordManager) Generate() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate")
	ret0, _ := ret[0].(string)
	return ret0
}

// Generate indicates an expected call of Generate.
func (mr *MockPasswordManagerMockRecorder) Generate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockPasswordManager)(nil).Generate))
}

// Matches mocks base method.
func (m *MockPasswordManager) Matches(encodedPassword, rawPassword string) (*bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Matches", encodedPassword, rawPassword)
	ret0, _ := ret[0].(*bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Matches indicates an expected call of Matches.
func (mr *MockPasswordManagerMockRecorder) Matches(encodedPassword, rawPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Matches", reflect.TypeOf((*MockPasswordManager)(nil).Matches), encodedPassword, rawPassword)
}

// UpgradeEncoding mocks base method.
func (m *MockPasswordManager) UpgradeEncoding(encodedPassword string) (*bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeEncoding", encodedPassword)
	ret0, _ := ret[0].(*bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeEncoding indicates an expected call of UpgradeEncoding.
func (mr *MockPasswordManagerMockRecorder) UpgradeEncoding(encodedPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeEncoding", reflect.TypeOf((*MockPasswordManager)(nil).UpgradeEncoding), encodedPassword)
}

// Validate mocks base method.
func (m *MockPasswordManager) Validate(rawPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", rawPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockPasswordManagerMockRecorder) Validate(rawPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockPasswordManager)(nil).Validate), rawPassword)
}

// set mocks base method.
func (m *MockPasswordManager) set(property string, value int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "set", property, value)
}

// set indicates an expected call of set.
func (mr *MockPasswordManagerMockRecorder) set(property, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "set", reflect.TypeOf((*MockPasswordManager)(nil).set), property, value)
}
