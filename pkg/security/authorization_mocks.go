// Code generated by MockGen. DO NOT EDIT.
// Source: ../pkg/security/authorization_types.go
//
// Generated by this command:
//
//	mockgen -package=security -destination ../pkg/security/authorization_mocks.go -source ../pkg/security/authorization_types.go
//

// Package security is a generated GoMock package.
package security

import (
	context "context"
	reflect "reflect"

	rest "github.com/guidomantilla/go-feather-lib/pkg/common/rest"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthorizationFilter is a mock of AuthorizationFilter interface.
type MockAuthorizationFilter struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationFilterMockRecorder
	isgomock struct{}
}

// MockAuthorizationFilterMockRecorder is the mock recorder for MockAuthorizationFilter.
type MockAuthorizationFilterMockRecorder struct {
	mock *MockAuthorizationFilter
}

// NewMockAuthorizationFilter creates a new mock instance.
func NewMockAuthorizationFilter(ctrl *gomock.Controller) *MockAuthorizationFilter {
	mock := &MockAuthorizationFilter{ctrl: ctrl}
	mock.recorder = &MockAuthorizationFilterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizationFilter) EXPECT() *MockAuthorizationFilterMockRecorder {
	return m.recorder
}

// Authorize mocks base method.
func (m *MockAuthorizationFilter) Authorize(ctx rest.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Authorize", ctx)
}

// Authorize indicates an expected call of Authorize.
func (mr *MockAuthorizationFilterMockRecorder) Authorize(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockAuthorizationFilter)(nil).Authorize), ctx)
}

// MockAuthorizationService is a mock of AuthorizationService interface.
type MockAuthorizationService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationServiceMockRecorder
	isgomock struct{}
}

// MockAuthorizationServiceMockRecorder is the mock recorder for MockAuthorizationService.
type MockAuthorizationServiceMockRecorder struct {
	mock *MockAuthorizationService
}

// NewMockAuthorizationService creates a new mock instance.
func NewMockAuthorizationService(ctrl *gomock.Controller) *MockAuthorizationService {
	mock := &MockAuthorizationService{ctrl: ctrl}
	mock.recorder = &MockAuthorizationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizationService) EXPECT() *MockAuthorizationServiceMockRecorder {
	return m.recorder
}

// Authorize mocks base method.
func (m *MockAuthorizationService) Authorize(ctx context.Context, tokenString string) (*Principal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", ctx, tokenString)
	ret0, _ := ret[0].(*Principal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorize indicates an expected call of Authorize.
func (mr *MockAuthorizationServiceMockRecorder) Authorize(ctx, tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockAuthorizationService)(nil).Authorize), ctx, tokenString)
}
