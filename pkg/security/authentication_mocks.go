// Code generated by MockGen. DO NOT EDIT.
// Source: ../pkg/security/authentication_types.go
//
// Generated by this command:
//
//	mockgen -package=security -destination ../pkg/security/authentication_mocks.go -source ../pkg/security/authentication_types.go
//

// Package security is a generated GoMock package.
package security

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAuthenticationEndpoint is a mock of AuthenticationEndpoint interface.
type MockAuthenticationEndpoint struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticationEndpointMockRecorder
	isgomock struct{}
}

// MockAuthenticationEndpointMockRecorder is the mock recorder for MockAuthenticationEndpoint.
type MockAuthenticationEndpointMockRecorder struct {
	mock *MockAuthenticationEndpoint
}

// NewMockAuthenticationEndpoint creates a new mock instance.
func NewMockAuthenticationEndpoint(ctrl *gomock.Controller) *MockAuthenticationEndpoint {
	mock := &MockAuthenticationEndpoint{ctrl: ctrl}
	mock.recorder = &MockAuthenticationEndpointMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticationEndpoint) EXPECT() *MockAuthenticationEndpointMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockAuthenticationEndpoint) Authenticate(response http.ResponseWriter, request *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Authenticate", response, request)
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockAuthenticationEndpointMockRecorder) Authenticate(response, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuthenticationEndpoint)(nil).Authenticate), response, request)
}

// MockAuthenticationService is a mock of AuthenticationService interface.
type MockAuthenticationService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticationServiceMockRecorder
	isgomock struct{}
}

// MockAuthenticationServiceMockRecorder is the mock recorder for MockAuthenticationService.
type MockAuthenticationServiceMockRecorder struct {
	mock *MockAuthenticationService
}

// NewMockAuthenticationService creates a new mock instance.
func NewMockAuthenticationService(ctrl *gomock.Controller) *MockAuthenticationService {
	mock := &MockAuthenticationService{ctrl: ctrl}
	mock.recorder = &MockAuthenticationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticationService) EXPECT() *MockAuthenticationServiceMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockAuthenticationService) Authenticate(ctx context.Context, principal *Principal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", ctx, principal)
	ret0, _ := ret[0].(error)
	return ret0
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockAuthenticationServiceMockRecorder) Authenticate(ctx, principal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuthenticationService)(nil).Authenticate), ctx, principal)
}

// Validate mocks base method.
func (m *MockAuthenticationService) Validate(principal *Principal) []error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", principal)
	ret0, _ := ret[0].([]error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockAuthenticationServiceMockRecorder) Validate(principal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockAuthenticationService)(nil).Validate), principal)
}
