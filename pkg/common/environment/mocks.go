// Code generated by MockGen. DO NOT EDIT.
// Source: ../pkg/common/environment/types.go
//
// Generated by this command:
//
//	mockgen -package=environment -destination ../pkg/common/environment/mocks.go -source ../pkg/common/environment/types.go
//

// Package environment is a generated GoMock package.
package environment

import (
	reflect "reflect"

	properties "github.com/guidomantilla/go-feather-lib/pkg/common/properties"
	gomock "go.uber.org/mock/gomock"
)

// MockEnvironment is a mock of Environment interface.
type MockEnvironment struct {
	ctrl     *gomock.Controller
	recorder *MockEnvironmentMockRecorder
}

// MockEnvironmentMockRecorder is the mock recorder for MockEnvironment.
type MockEnvironmentMockRecorder struct {
	mock *MockEnvironment
}

// NewMockEnvironment creates a new mock instance.
func NewMockEnvironment(ctrl *gomock.Controller) *MockEnvironment {
	mock := &MockEnvironment{ctrl: ctrl}
	mock.recorder = &MockEnvironmentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvironment) EXPECT() *MockEnvironmentMockRecorder {
	return m.recorder
}

// AppendPropertySources mocks base method.
func (m *MockEnvironment) AppendPropertySources(propertySources ...properties.PropertySource) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range propertySources {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AppendPropertySources", varargs...)
}

// AppendPropertySources indicates an expected call of AppendPropertySources.
func (mr *MockEnvironmentMockRecorder) AppendPropertySources(propertySources ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendPropertySources", reflect.TypeOf((*MockEnvironment)(nil).AppendPropertySources), propertySources...)
}

// PropertySources mocks base method.
func (m *MockEnvironment) PropertySources() []properties.PropertySource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PropertySources")
	ret0, _ := ret[0].([]properties.PropertySource)
	return ret0
}

// PropertySources indicates an expected call of PropertySources.
func (mr *MockEnvironmentMockRecorder) PropertySources() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropertySources", reflect.TypeOf((*MockEnvironment)(nil).PropertySources))
}

// Value mocks base method.
func (m *MockEnvironment) Value(property string) EnvVar {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value", property)
	ret0, _ := ret[0].(EnvVar)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockEnvironmentMockRecorder) Value(property any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockEnvironment)(nil).Value), property)
}

// ValueOrDefault mocks base method.
func (m *MockEnvironment) ValueOrDefault(property, defaultValue string) EnvVar {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValueOrDefault", property, defaultValue)
	ret0, _ := ret[0].(EnvVar)
	return ret0
}

// ValueOrDefault indicates an expected call of ValueOrDefault.
func (mr *MockEnvironmentMockRecorder) ValueOrDefault(property, defaultValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValueOrDefault", reflect.TypeOf((*MockEnvironment)(nil).ValueOrDefault), property, defaultValue)
}
