// Code generated by MockGen. DO NOT EDIT.
// Source: ../pkg/messaging/types.go
//
// Generated by this command:
//
//	mockgen -package=messaging -destination ../pkg/messaging/mocks.go -source ../pkg/messaging/types.go
//

// Package messaging is a generated GoMock package.
package messaging

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockContext is a mock of Context interface.
type MockContext struct {
	ctrl     *gomock.Controller
	recorder *MockContextMockRecorder
	isgomock struct{}
}

// MockContextMockRecorder is the mock recorder for MockContext.
type MockContextMockRecorder struct {
	mock *MockContext
}

// NewMockContext creates a new mock instance.
func NewMockContext(ctrl *gomock.Controller) *MockContext {
	mock := &MockContext{ctrl: ctrl}
	mock.recorder = &MockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContext) EXPECT() *MockContextMockRecorder {
	return m.recorder
}

// Server mocks base method.
func (m *MockContext) Server() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Server")
	ret0, _ := ret[0].(string)
	return ret0
}

// Server indicates an expected call of Server.
func (mr *MockContextMockRecorder) Server() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Server", reflect.TypeOf((*MockContext)(nil).Server))
}

// Set mocks base method.
func (m *MockContext) Set(property, value string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", property, value)
}

// Set indicates an expected call of Set.
func (mr *MockContextMockRecorder) Set(property, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockContext)(nil).Set), property, value)
}

// Url mocks base method.
func (m *MockContext) Url() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Url")
	ret0, _ := ret[0].(string)
	return ret0
}

// Url indicates an expected call of Url.
func (mr *MockContextMockRecorder) Url() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Url", reflect.TypeOf((*MockContext)(nil).Url))
}

// MockConnection is a mock of Connection interface.
type MockConnection[T ConnectionTypes] struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionMockRecorder[T]
	isgomock struct{}
}

// MockConnectionMockRecorder is the mock recorder for MockConnection.
type MockConnectionMockRecorder[T ConnectionTypes] struct {
	mock *MockConnection[T]
}

// NewMockConnection creates a new mock instance.
func NewMockConnection[T ConnectionTypes](ctrl *gomock.Controller) *MockConnection[T] {
	mock := &MockConnection[T]{ctrl: ctrl}
	mock.recorder = &MockConnectionMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnection[T]) EXPECT() *MockConnectionMockRecorder[T] {
	return m.recorder
}

// Close mocks base method.
func (m *MockConnection[T]) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockConnectionMockRecorder[T]) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConnection[T])(nil).Close))
}

// Connect mocks base method.
func (m *MockConnection[T]) Connect() (T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockConnectionMockRecorder[T]) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockConnection[T])(nil).Connect))
}

// Context mocks base method.
func (m *MockConnection[T]) Context() Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockConnectionMockRecorder[T]) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockConnection[T])(nil).Context))
}

// MockListener is a mock of Listener interface.
type MockListener[T ListenerTypes] struct {
	ctrl     *gomock.Controller
	recorder *MockListenerMockRecorder[T]
	isgomock struct{}
}

// MockListenerMockRecorder is the mock recorder for MockListener.
type MockListenerMockRecorder[T ListenerTypes] struct {
	mock *MockListener[T]
}

// NewMockListener creates a new mock instance.
func NewMockListener[T ListenerTypes](ctrl *gomock.Controller) *MockListener[T] {
	mock := &MockListener[T]{ctrl: ctrl}
	mock.recorder = &MockListenerMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListener[T]) EXPECT() *MockListenerMockRecorder[T] {
	return m.recorder
}

// OnMessage mocks base method.
func (m *MockListener[T]) OnMessage(ctx context.Context, message T) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnMessage", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnMessage indicates an expected call of OnMessage.
func (mr *MockListenerMockRecorder[T]) OnMessage(ctx, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnMessage", reflect.TypeOf((*MockListener[T])(nil).OnMessage), ctx, message)
}

// MockConsumer is a mock of Consumer interface.
type MockConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerMockRecorder
	isgomock struct{}
}

// MockConsumerMockRecorder is the mock recorder for MockConsumer.
type MockConsumerMockRecorder struct {
	mock *MockConsumer
}

// NewMockConsumer creates a new mock instance.
func NewMockConsumer(ctrl *gomock.Controller) *MockConsumer {
	mock := &MockConsumer{ctrl: ctrl}
	mock.recorder = &MockConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumer) EXPECT() *MockConsumerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockConsumer) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockConsumerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConsumer)(nil).Close))
}

// Consume mocks base method.
func (m *MockConsumer) Consume(ctx context.Context) (Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", ctx)
	ret0, _ := ret[0].(Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consume indicates an expected call of Consume.
func (mr *MockConsumerMockRecorder) Consume(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockConsumer)(nil).Consume), ctx)
}

// Context mocks base method.
func (m *MockConsumer) Context() Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockConsumerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockConsumer)(nil).Context))
}

// Set mocks base method.
func (m *MockConsumer) Set(property string, value any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", property, value)
}

// Set indicates an expected call of Set.
func (mr *MockConsumerMockRecorder) Set(property, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockConsumer)(nil).Set), property, value)
}

// MockProducer is a mock of Producer interface.
type MockProducer[T PublishingTypes] struct {
	ctrl     *gomock.Controller
	recorder *MockProducerMockRecorder[T]
	isgomock struct{}
}

// MockProducerMockRecorder is the mock recorder for MockProducer.
type MockProducerMockRecorder[T PublishingTypes] struct {
	mock *MockProducer[T]
}

// NewMockProducer creates a new mock instance.
func NewMockProducer[T PublishingTypes](ctrl *gomock.Controller) *MockProducer[T] {
	mock := &MockProducer[T]{ctrl: ctrl}
	mock.recorder = &MockProducerMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducer[T]) EXPECT() *MockProducerMockRecorder[T] {
	return m.recorder
}

// Close mocks base method.
func (m *MockProducer[T]) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockProducerMockRecorder[T]) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockProducer[T])(nil).Close))
}

// Context mocks base method.
func (m *MockProducer[T]) Context() Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockProducerMockRecorder[T]) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockProducer[T])(nil).Context))
}

// Produce mocks base method.
func (m *MockProducer[T]) Produce(ctx context.Context, message T) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Produce", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Produce indicates an expected call of Produce.
func (mr *MockProducerMockRecorder[T]) Produce(ctx, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockProducer[T])(nil).Produce), ctx, message)
}
