func (queue *DefaultRabbitMQQueue) reconnect() {

	if !queue.rabbitMQConnection.RabbitMQContext().FailOver() {
		return
	}

	notifyOnClosedEvent := func() (*amqp.Error, bool) {
		select {
		case reason, ok := <-queue.notifyOnClosedChannel:
			return reason, ok
			/*
				case reason, ok := <-queue.notifyOnClosedQueue:
					return &amqp.Error{Reason: reason}, ok

			*/
		}
	}

	for {
		var ok bool
		var reason *amqp.Error
		if reason, ok = notifyOnClosedEvent(); !ok {
			break
		}
		log.Debug(fmt.Sprintf("rabbitmq queue - queue %s closed unexpectedly: %s", queue.name, reason.Reason))

		<-queue.RabbitMQContext().NotifyOnFaiOverConnection()
		time.Sleep(makeConnectionDelay)
		queue.Close()

		log.Debug(fmt.Sprintf("rabbitmq queue - trying reconnection to queue"))

		for {
			time.Sleep(makeConnectionDelay)
			if err := queue.connect(); err != nil {
				log.Error(fmt.Sprintf("rabbitmq queue - failed reconnection to queue %s: %s", queue.name, err.Error()))
				continue
			}
			log.Info(fmt.Sprintf("rabbitmq queue - reconnected to queue %s", queue.name))
			break
		}
	}
}